/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package blackwindow;

import java.awt.Color;
import java.awt.FlowLayout;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author iosdev747
 */
public class Server extends javax.swing.JFrame {
    boolean isGameStart;
    Thread thread1;
    ImageIcon ic = new ImageIcon("/home/iosdev747/NetBeansProjects/BlackWidow/BlackWindow/src/blackwindow/background-image.jpg");
    JLabel background = new JLabel(ic);
    int numberOfPlayers;
    String dealerStatus;
    Dealer dealer = new Dealer();
    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
        ServerLog("Loading components ...");
        setTitle("BLACK JACK GAME");
        setLocationRelativeTo(null);
        background.setBounds(0, 0, 1366, 768);  //my resolution
        getContentPane().setBackground(Color.red);
        add(background);
        background.setLayout(new FlowLayout());
        startButton.setOpaque(false);
        startButton.setContentAreaFilled(false);
        startButton.setBorderPainted(true);
        ServerLog("initialising network manager ...");
        ServerLog("Waiting for players to join");
        ServerManager manage = new ServerManager(this);
        thread1 = new Thread(manage);
        thread1.start();
        isGameStart=false;
        startButton.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startButton = new javax.swing.JButton();
        logScrollPane = new javax.swing.JScrollPane();
        logTextPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startButton.setBackground(new java.awt.Color(255, 255, 255));
        startButton.setForeground(new java.awt.Color(255, 255, 255));
        startButton.setText("Start");
        startButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        logScrollPane.setViewportView(logTextPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logScrollPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 324, Short.MAX_VALUE)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        thread1.stop();
        startButton.setText("Stop");
        if(isGameStart){
            ServerLog("Game stoped");
            StartGame object = new StartGame();
            this.setVisible(false);
            object.setVisible(true);
        }
        else{
            ServerLog("Game started");
            ServerLog("Welcome to the BlackJack table!");
            ServerLog("Best of Luck! :) ");
            ServerLog("");
            dealer.initDeal();
            ServerLog("Dealer card initialised");
        }
        isGameStart = true;
        
    }//GEN-LAST:event_startButtonActionPerformed

    public boolean GameStatus(){
        return isGameStart;
    }
    
    public String getDealerCards(){
        return dealer.getDealerCards();
    }
    
    public void ServerLog(String message){
        logTextPane.setText(logTextPane.getText() + "\n" + message);
    }
    
    public void StartButton(boolean value){
        startButton.setVisible(value);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JTextPane logTextPane;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
}
class Users implements Runnable{
	
    DataOutputStream out;
    DataInputStream in;
    Users[] user = new Users[4];
    Player player;
    int purse;
    String name;
    int pid;
    String message;
    Server server;
    public Users(DataOutputStream out, DataInputStream in,Users[] user, int pid, Server server, int purse, Player player){
        this.out=out;
        this.in=in;
        this.user=user;
        this.pid=pid;
        this.server=server;
        this.purse=purse;
        this.player=player;
    }
    public void run(){
        
        try{
            user[pid].out.writeUTF("Your pid is :" + pid);
            server.ServerLog("Player pID: " + pid + " connected with purse: " + purse);
            while(true){
                System.out.print(".");
                if(server.GameStatus()){
                    break;
                }
            }
            String dealercards=server.getDealerCards();
            out.writeUTF(dealercards);
        }catch(IOException e){
            server.ServerLog("Player pID: " + pid + " disconnected");
            user[pid]=null;
        }
    }
}


class Input implements Runnable{
    Server server;
    int numberOfPlayers;
    Users users[];
    String[] status;
    public Input(Users users[],int numberOfPlayers,Server server){
        this.server=server;
        this.numberOfPlayers=numberOfPlayers;
        this.users=users;
        status = new String[numberOfPlayers];
    }
    public void run(){
        try {
            for(int i=0;i<numberOfPlayers;i++){
                for(int j=0;j<numberOfPlayers;j++){
                    users[j].out.writeUTF("p"+i);
                }
                int bet=users[i].in.readInt();
                sendCards();
                label:{while(true){
                    String choice=users[i].in.readUTF();
                    if(choice.equals("yes")){
                        if(users[i].player.playHand()){
                            status[i]="busted";
                            break label;
                        }
                    }
                    else{
                        break label;
                    }
                }}
                if(!status[i].equals("busted")&&!server.dealerStatus.equals("busted")){
                    status[i]=""+users[i].player.compareHands(server.dealer.getHandValue(),bet);
                }
                else if(!status[i].equals("busted")&&server.dealerStatus.equals("busted")){
                    status[i]=""+bet;
                }
                else if(status[i].equals("busted")&&!server.dealerStatus.equals("busted")){
                    status[i]=""+"-"+bet;
                }
                else if(status[i].equals("busted")&&server.dealerStatus.equals("busted")){
                    status[i]=""+bet;
                }
            }
        } catch (IOException ex) {
                server.ServerLog("Unable to connect");
        }
    }
    public void sendCards(){
        try {
            for(int i=0;i<numberOfPlayers;i++){
                for(int j=0;j<numberOfPlayers;j++){
                    users[j].out.writeUTF(i+"-"+users[i].player.getPlayerCards());
                    server.ServerLog("To"+j+"="+i+"-"+users[i].player.getPlayerCards());
                }
            }
        } catch (IOException ex) {
                server.ServerLog("Unable to connect");
        }
    }
}


class ServerManager implements Runnable{

    static ServerSocket serverSocket;
    static Users[] user = new Users[4];
    static Server server;
    int purse = 100;
    Player player = new Player(purse);
    
    public ServerManager(Server server){
        this.server = server;
    }
    
    public void run(){
        try{
            serverSocket = new ServerSocket(7777);
            while(true){
                Socket socket = serverSocket.accept();
                for(int i=0;i<4;i++){
                    if(user[i]==null){
                        DataOutputStream out = new DataOutputStream(socket.getOutputStream());
                        DataInputStream in = new DataInputStream(socket.getInputStream());
                        user[i]=new Users(out,in,user,i,server,purse,player);
                        Thread thread = new Thread(user[i]);
                        thread.start();
                        break;
                    }
                }
                server.ServerLog("+"+server.numberOfPlayers+1);
                if(server.numberOfPlayers > 0)
                    server.StartButton(true);
            }
        }catch(Exception e){
            e.printStackTrace();
            server.ServerLog("" + e);
        }
        int noofPlys=0;
        for(noofPlys=0;user[noofPlys]!=null&&noofPlys<4;noofPlys++);
        Input input = new Input(user,noofPlys,server);
        Thread inputThread = new Thread(input);
        inputThread.start();
        if(server.dealer.playHand()){
            server.dealerStatus="busted";
        }
    }
}